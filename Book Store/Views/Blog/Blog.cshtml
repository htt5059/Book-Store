@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@model Book_Store.Models.ViewModels.BlogVM
@{
    if(Model == null)
        ViewData["Title"] = "Blog Not Found";
    else
        ViewData["Title"] = Model.Blog.PageTitle;
}

@section Scripts{
    <script>
        const btnLike = document.getElementById('btnLike')

        btnLike.addEventListener('click', async () => {
            await fetch('/api/Like/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({ BlogId: '@Model.Blog.Id', UserId: '@userManager.GetUserId(User)' })
            })
                .then(console.log('Request Sent'))
            })
    </script>
    <script>
        async function updateLikes(){
            const res = await fetch('/api/Like/GetLikes/' + '@Model.Blog.Id')
            res.json().then(data =>  { 
                let likes = data.blogLikes
                const likesEl = $('#likeCounter')
                if (likes <= 1) {
                    likeEl.removeClass('bi-hand-thumbs-up').addClass('bi-hand-thumbs-up-fill')
                    likesEl.text(likes + " Like")
                } else {
                    likeEl.removeClass('bi-hand-thumbs-up').addClass('bi-hand-thumbs-up-fill')
                    likesEl.text(likes + " Likes")
                }
            })
        }
        //long polling: 5 mins
        setInterval(updateLikes, 1000*60*5)
    </script>
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8">
            @if (Model != null)
            {
                <h1 class="text-center">@Model.Blog.Heading</h1>
                <div class="container">
                    <div class="row row-cols-2">
                        <div class="col col-6">
                            <p>@Model.Blog.Author</p>
                        </div>
                        <div class="col col-6">
                            <p class="text-end">@Model.Blog.PublishDate.ToShortDateString()</p>
                        </div>
                    </div>
                    <img class="d-block img-fluid m-1" src="@Model.Blog.FeaturedUrl"></img>
                    @foreach (var tag in Model.Blog.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.DisplayName</span>
                    }
                    <div class="mb-3 blog-details-content">
                        @Html.Raw(Model.Blog.Content)
                    </div>
                    <div class="mb-3">
                        <button class="btn btn-primary">
                            <a id="btnLike" style="cursor: pointer;">
                                <i class="bi bi-hand-thumbs-up" id="likeCounter">@Model.BlogLikes Like</i>
                            </a>
                        </button>
                    </div>
                </div>
            }
            else
            {
                <p>Blog Not Found!</p>    
            }
        </div>

    </div>
</div>